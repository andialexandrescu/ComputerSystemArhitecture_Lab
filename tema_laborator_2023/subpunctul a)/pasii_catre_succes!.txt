Pasii urmati pt subpunctul a) de la tema de laborator (am scris in paralel in codeblocks in C++ programul pt a intelege cum se indexeaza si ce trebuie facut):
1. intelegertea functionarii matricelor in assembly + exercitiul de la finalul suportului de laborator 0x01
2. gestionarea citirii de la tastatura; am inteles conceptul conform caruia functiile printf si scanf modifica registrii intr-un mod neinteles; solutia implica utilizarea unei perechi de instructiuni: fie pushl reg, urmata de popl reg (acelasi registru pt a-si recapata valoarea initiala); fie pusha, urmata de popa 
3. citire de la tastatura a valorilor de input: m, n, p, perechile (i,j) si k; afisare matrice matrix exact cum e salvata in memorie, incepand cu adresa lui %edi
4. intrebari legate de bordarea matricei initiale matrix: bordare cu 4 for-uri (cum se facea la bac s3 ex2) sau sa o aleg direct bordata, iar cand afisez matricea initiala (cerinta), sa afisez pt i de la 1 la m-1 si j de la 1 la n-1
5. varianta aleasa este bordarea directa, astfel incat valorile de 1 sa fie atribuite pentru elementele de forma matrix[i+1][j+1], unde (i,j) reprezinta o pereche; asadar, matrix e bordata de la inceput, numai ca sunt atribuite valori de 1 (muchie intr-un graf orientat) unui element de forma matrix[i+1][j+1], in loc de matrix[i][j], asa cum ar fi trebuit pentru prima varianta de rezolvare
6. implementarea afisarii matricei extinse si a celei iniÈ›iale in aceasta ordine, deoarece matricea initiala trebuie sa revina la valorile initiale ale numarului de linii si coloane (este necesara decrementarea lui n si m cu 2, matricea initiala avand m_init linii si n_init coloane)
7. de retinut ca acum m si n au valorile lor initiale, asadar, mereu cand afisez, fac succesiv operatiile de add $2,n / sub $2,n pt accesarea elementelor din matricea extinsa matrix
8. realizarea etichetei afis_suma_vecini_elem_curent pentru a calcula suma vecinilor curenti; accesarea vecinilor se realizeaza raportat la lineIndex si columnIndex din matricea extinsa matrix, iar i = lineIndex + 1, j = columnIndex + 1, de unde rezulta ca i - 1 = lineIndex, i + 1 = lineIndex + 2 (similar pt j)
9. upgrade de la eticheta afis_suma_vecini_elem_curent la compunere_matrice_s si afis_matrice_s, pt a permite ulterior apelarea sumei vecinilor corespunzatori elementului curent din matricea neextinsa
10. prima_evolutie implica definirea conceptelor de baza din conway's game of life - modificarea elementului curent din 0 si 1 si invers, precum si corespondenta dintre matrix si matrixs (pt a apela din ambele matrice, folosesc acelasi eax = (lineIndex+1)*(n_init+2)+(columnIndex+1))
11. corectari multiple la instruct de jmp la etichete
12. implementarea afis_k_evolutii pt a afisa fiecare evolutie de la pasul curent pana cand indexul k specificat, atunci cand kIndex==k; modificarea unor ciclari (compunere_matrice_s -> afis_matrice_s -> analiza_evolutie -> afis_analiza_evolutie -> cont_afis_k_evolutii)
13. adaugarea de prompt-uri, precum "Iteratia <kIndex>" etc.

Fisierul prima_evolutie_task0.s cuprinde toti pasii mentionati.

Algoritmul implementat in C++:
#include <iostream>

using namespace std;

int main()
{
    int s, x, y, n, m, p, k, a[100][100], matrixs[100][100];
    cout<<"m="; cin>>m;
    cout<<"n="; cin>>n;
    cout<<"p="; cin>>p;
    for(int pIndex=0; pIndex<p; pIndex++)
    {
        cin>>x>>y;
        for(int i=0; i<m+2; i++)
        {
            for(int j=0; j<n+2; j++)
            {
                a[x+1][y+1] = 1;
            }
        }
    }
    cout<<"k="; cin>>k;
    cout<<endl;
    for(int lineIndex=0; lineIndex<m+2; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n+2; columnIndex++)
        {
            cout<<a[lineIndex][columnIndex]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
    for(int lineIndex=0; lineIndex<m; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n; columnIndex++)
        {
            cout<<a[lineIndex+1][columnIndex+1]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
    /*for(int lineIndex=0; lineIndex<m; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n; columnIndex++)
        {
            s = 0;
            //s = a[i-1][j-1] + a[i-1][j] + a[i-1][j+1] + a[i][j-1] + a[i][j+1]+ a[i+1][j-1] + a[i+1][j] + a[i+1][j+1]
            s = a[lineIndex][columnIndex] +
            a[lineIndex][columnIndex+1] +
            a[lineIndex][columnIndex+2] +
            a[lineIndex+1][columnIndex] +
            a[lineIndex+1][columnIndex+2]+
            a[lineIndex+2][columnIndex] +
            a[lineIndex+2][columnIndex+1] +
            a[lineIndex+2][columnIndex+2];
            matrixs[lineIndex+1][columnIndex+1]=s;
        }
    }
    for(int lineIndex=0; lineIndex<m; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n; columnIndex++)
        {
           cout<<matrixs[lineIndex+1][columnIndex+1]<<" ";
        }
        cout<<endl;
    }
    for(int lineIndex=0; lineIndex<m; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n; columnIndex++)
        {
            // add $2, n => sub $2, n
           if(a[lineIndex+1][columnIndex+1]==1)// jmp celula_vie
           {
                if(matrixs[lineIndex+1][columnIndex+1]<2 || matrixs[lineIndex+1][columnIndex+1]>3)// jmp elem_modif_in_0
                {
                    a[lineIndex+1][columnIndex+1] = 0;
                }
           } else // jmp celula_moarta
           {
                if(matrixs[lineIndex+1][columnIndex+1]==3)// jmp elem_modif_in_1
                {
                    a[lineIndex+1][columnIndex+1] = 1;
                }
           }
        }
    }
    cout<<endl;
    for(int lineIndex=0; lineIndex<m; lineIndex++)
    {
        for(int columnIndex=0; columnIndex<n; columnIndex++)
        {
           cout<<a[lineIndex+1][columnIndex+1]<<" ";
        }
        cout<<endl;
    }*/
    cout<<endl<<endl<<endl;
    for(int kIndex=0; kIndex<k; kIndex++)
    {
        // compunere_matrice_s
        for(int lineIndex=0; lineIndex<m; lineIndex++)
        {
            for(int columnIndex=0; columnIndex<n; columnIndex++)
            {
                s = 0;
                //s = a[i-1][j-1] + a[i-1][j] + a[i-1][j+1] + a[i][j-1] + a[i][j+1]+ a[i+1][j-1] + a[i+1][j] + a[i+1][j+1]
                s = a[lineIndex][columnIndex] +
                a[lineIndex][columnIndex+1] +
                a[lineIndex][columnIndex+2] +
                a[lineIndex+1][columnIndex] +
                a[lineIndex+1][columnIndex+2]+
                a[lineIndex+2][columnIndex] +
                a[lineIndex+2][columnIndex+1] +
                a[lineIndex+2][columnIndex+2];
                matrixs[lineIndex+1][columnIndex+1] = s;
            }
        }
        // afis_matrice_s
        for(int lineIndex=0; lineIndex<m; lineIndex++)
        {
            for(int columnIndex=0; columnIndex<n; columnIndex++)
            {
               cout<<matrixs[lineIndex+1][columnIndex+1]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
        // analiza_evolutie
        for(int lineIndex=0; lineIndex<m; lineIndex++)
        {
            for(int columnIndex=0; columnIndex<n; columnIndex++)
            {
                // add $2, n => sub $2, n
               if(a[lineIndex+1][columnIndex+1]==1)// jmp celula_vie
               {
                    if(matrixs[lineIndex+1][columnIndex+1]<2 || matrixs[lineIndex+1][columnIndex+1]>3)// jmp elem_modif_in_0
                    {
                        a[lineIndex+1][columnIndex+1] = 0;
                    }
               } else // jmp celula_moarta
               {
                    if(matrixs[lineIndex+1][columnIndex+1]==3)// jmp elem_modif_in_1
                    {
                        a[lineIndex+1][columnIndex+1] = 1;
                    }
               }
            }
        }
        // afis_analiza_evolutie
        for(int lineIndex=0; lineIndex<m; lineIndex++)
        {
            for(int columnIndex=0; columnIndex<n; columnIndex++)
            {
               cout<<a[lineIndex+1][columnIndex+1]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
    }
    return 0;
}

